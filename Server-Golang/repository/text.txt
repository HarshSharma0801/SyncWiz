package repository

import (
	"go-crud/models"
	"context"
	"fmt"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
)

type UserRepo struct {
	MongoCollection *mongo.Collection
}

func (r *UserRepo) CreateUser(user *models.User) (interface{}, error) {

	fmt.Println(user , "here is user")
	result, err := r.MongoCollection.InsertOne(context.Background(), user)
	if err != nil {
		fmt.Println(err)
		return nil, err
	}
	return result, nil
}

func (r *UserRepo) GetUserById(empId string) (interface{}, error) {
	var employee models.User
	err := r.MongoCollection.FindOne(context.Background(), bson.D{{Key: "employee_id", Value: empId}}).Decode(&employee)

	if err != nil {
		fmt.Println(err)
		return nil, err
	}

	return &employee, nil

}

func (r *UserRepo) GetUsers() ([]models.User, error) {
	result, err := r.MongoCollection.Find(context.Background(), bson.D{})

	if err != nil {
		fmt.Println(err)
		return nil, err
	}

	var data []models.User
	err = result.All(context.Background(), &data)

	if err != nil {
		fmt.Println(err)
		return nil, err
	}
	return data, nil

}

func (r *UserRepo) UpdateUserById(empId string, user *models.User) (int64, error) {

	result, err := r.MongoCollection.UpdateOne(context.Background(), bson.D{{Key:"employee_id", Value: &empId}}, bson.D{{Key: "$set", Value: &user}})

	if err != nil {
		fmt.Println(err)
		return 0, err
	}

	return result.ModifiedCount, nil
}

func (r *UserRepo) DeleteUserById(empId string) (int64, error) {
	result, err := r.MongoCollection.DeleteOne(context.Background(), bson.D{{Key: "employee_id", Value: &empId}})
	if err != nil {
		fmt.Println(err)
		return 0, err
	}
	return result.DeletedCount, nil
}
